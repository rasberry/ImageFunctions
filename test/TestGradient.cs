using System;
using System.IO;
using System.Text;
using ImageFunctions;
using ImageFunctions.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace test
{
	[TestClass]
	public class TestGradient
	{
		[DataTestMethod]
		[DataRow(0.0, 0.0)]
		[DataRow(0.1, 0.1)]
		[DataRow(0.2, 0.2)]
		[DataRow(0.3, 0.3)]
		[DataRow(0.4, 0.4)]
		[DataRow(0.5, 0.5)]
		[DataRow(0.6, 0.6)]
		[DataRow(0.7, 0.7)]
		[DataRow(0.8, 0.8)]
		[DataRow(0.9, 0.9)]
		[DataRow(1.0, 1.0)]
		public void TestGrayGradient(double index, double egray)
		{
			var grad = new GrayGradient();
			var c1 = new IColor(egray,egray,egray,1.0);
			var c2 = grad.GetColor(index);
			Helpers.AssertAreSimilar(c1,c2,0.2);
		}

		[DataTestMethod]
		[DataRow(0.0, 0.0, 0.0, 0.0)]
		[DataRow(0.1, 0.2, 0.0, 0.0)]
		[DataRow(0.2, 0.4, 0.1, 0.0)]
		[DataRow(0.3, 0.6, 0.3, 0.0)]
		[DataRow(0.4, 0.8, 0.5, 0.0)]
		[DataRow(0.5, 1.0, 0.8, 0.0)]
		[DataRow(0.6, 1.0, 0.9, 0.2)]
		[DataRow(0.7, 1.0, 0.9, 0.4)]
		[DataRow(0.8, 1.0, 0.9, 0.6)]
		[DataRow(0.9, 1.0, 0.9, 0.8)]
		[DataRow(1.0, 1.0, 1.0, 1.0)]
		public void TestFullRangeRGBGradient(double index, double r,double g,double b)
		{
			var grad = new FullRangeRGBGradient();
			var c1 = new IColor(r,g,b,1.0);
			var c2 = grad.GetColor(index);
			Helpers.AssertAreSimilar(c1,c2,0.2);
		}

		static GimpGGRGradient _ggr = null;
		static GimpGGRGradient GetGimpGGRGradient()
		{
			if(_ggr == null) {
				string ggrFile = String.Join(Environment.NewLine
					,"GIMP Gradient"
					,"Name: Compact Disk"
					,"18"
					,"0.000000 0.010566 0.023372 0.819999 0.820000 0.820000 1.000000 0.879999 0.880000 0.880000 1.000000 0 0"
					,"0.023372 0.045682 0.063439 0.879999 0.880000 0.880000 1.000000 0.999999 1.000000 1.000000 1.000000 0 0"
					,"0.063439 0.082638 0.176962 0.999999 1.000000 1.000000 1.000000 0.909999 0.910000 0.910000 1.000000 0 0"
					,"0.176962 0.205342 0.236227 0.909999 0.910000 0.910000 1.000000 0.819999 0.820000 0.820000 1.000000 0 0"
					,"0.236227 0.267623 0.281302 0.819999 0.820000 0.820000 1.000000 0.903167 1.000000 0.000000 1.000000 0 0"
					,"0.281302 0.296327 0.310518 0.903167 1.000000 0.000000 1.000000 0.000000 0.877893 1.000000 1.000000 0 0"
					,"0.310518 0.321369 0.340568 0.000000 0.877893 1.000000 1.000000 0.384390 1.000000 0.900682 1.000000 0 0"
					,"0.340568 0.357129 0.373957 0.384390 1.000000 0.900682 1.000000 0.819999 0.820000 0.820000 1.000000 0 0"
					,"0.373957 0.434190 0.500000 0.819999 0.820000 0.820000 1.000000 0.879999 0.880000 0.880000 1.000000 0 0"
					,"0.500000 0.510566 0.523372 0.819999 0.820000 0.820000 1.000000 0.879999 0.880000 0.880000 1.000000 0 0"
					,"0.523372 0.545682 0.563439 0.879999 0.880000 0.880000 1.000000 0.999999 1.000000 1.000000 1.000000 0 0"
					,"0.563439 0.582638 0.676962 0.999999 1.000000 1.000000 1.000000 0.909999 0.910000 0.910000 1.000000 0 0"
					,"0.676962 0.705342 0.736227 0.909999 0.910000 0.910000 1.000000 0.819999 0.820000 0.820000 1.000000 0 0"
					,"0.736227 0.767623 0.781302 0.819999 0.820000 0.820000 1.000000 0.903167 1.000000 0.000000 1.000000 0 0"
					,"0.781302 0.796327 0.810518 0.903167 1.000000 0.000000 1.000000 0.000000 0.877893 1.000000 1.000000 0 0"
					,"0.810518 0.821369 0.840568 0.000000 0.877893 1.000000 1.000000 0.384390 1.000000 0.900682 1.000000 0 0"
					,"0.840568 0.857129 0.873957 0.384390 1.000000 0.900682 1.000000 0.819999 0.820000 0.820000 1.000000 0 0"
					,"0.873957 0.934190 1.000000 0.819999 0.820000 0.820000 1.000000 0.879999 0.880000 0.880000 1.000000 0 0"
				);

				var ggrBytes = Encoding.UTF8.GetBytes(ggrFile);
				using (var stream = new MemoryStream(ggrBytes)) {
					_ggr = new GimpGGRGradient(stream);
				}
			}
			return _ggr;
		}

		[DataTestMethod]
		[DataRow(0.0, 0.8, 0.8, 0.8)]
		[DataRow(0.1, 0.9, 0.9, 0.9)]
		[DataRow(0.2, 0.9, 0.9, 0.9)]
		[DataRow(0.3, 0.3, 0.9, 0.6)]
		[DataRow(0.4, 0.8, 0.8, 0.8)]
		[DataRow(0.5, 0.9, 0.9, 0.9)]
		[DataRow(0.6, 0.9, 0.9, 0.9)]
		[DataRow(0.7, 0.9, 0.9, 0.9)]
		[DataRow(0.8, 0.3, 0.9, 0.6)]
		[DataRow(0.9, 0.8, 0.8, 0.8)]
		[DataRow(1.0, 0.9, 0.9, 0.9)]
		public void TestGimpGGRGradient(double index, double r,double g,double b)
		{
			var grad = GetGimpGGRGradient();
			var c1 = new IColor(r,g,b,1.0);
			var c2 = grad.GetColor(index);
			Helpers.AssertAreSimilar(c1,c2,0.2);
		}

		static Gnofract4dGradient _gf4d = null;
		static Gnofract4dGradient GetGnofract4d()
		{
			if (_gf4d == null) {
				string gf4File = String.Join(Environment.NewLine,
					" 48  48  48"," 68 252   0","148 148 148"," 56 244  20","144 144 144"," 44 232  44","140 140 140"," 36 216  68",
					"136 136 136"," 24 204  92","132 132 132"," 12 192 116","128 128 128","  0 176 140","124 124 124","  0 136 168",
					"120 120 120","  0  92 192","116 116 116","  0  56 216","112 112 112","  0  12 244","108 108 108"," 24   0 228",
					"104 104 104"," 56   0 196","100 100 100"," 88   0 164"," 96  96  96","120   0 132"," 92  92  92","156   0  96",
					" 88  88  88","188   0  64"," 84  84  84","220   0  32"," 80  80  80","252   0   0"," 76  76  76","252  24   0",
					" 72  72  72","252  56   0"," 68  68  68","252  88   0"," 64  64  64","252 120   0"," 60  60  60","252 152   0",
					" 56  56  56","252 184   0"," 52  52  52","252 216   0"," 48  48  48","252 248   0"," 44  44  44","228 252   0",
					" 40  40  40","196 252   0"," 36  36  36","164 252   0"," 32  32  32","132 252   0"," 28  28  28","100 252   0",
					" 24  24  24"," 68 252   0"," 20  20  20"," 56 244  20"," 16  16  16"," 44 232  44"," 12  12  12"," 36 216  68",
					"  8   8   8"," 24 204  92","  4   4   4"," 12 192 116","  0   0   0","  0 176 140","  0 156 156","  0   0   0",
					"  0 112 180","  4   4   4","  0  76 204","  8   8   8","  0  32 232"," 12  12  12","  8   0 244"," 16  16  16",
					" 40   0 212"," 20  20  20"," 72   0 180"," 24  24  24","104   0 148"," 28  28  28","140   0 112"," 32  32  32",
					"172   0  80"," 36  36  36","204   0  48"," 40  40  40","236   0  16"," 44  44  44","252   8   0"," 48  48  48",
					"252  40   0"," 52  52  52","252  72   0"," 56  56  56","252 104   0"," 60  60  60","252 136   0"," 64  64  64",
					"252 168   0"," 68  68  68","252 200   0"," 72  72  72","252 232   0"," 76  76  76","244 252   0"," 80  80  80",
					"212 252   0"," 84  84  84","180 252   0"," 88  88  88","148 252   0"," 92  92  92","116 252   0"," 96  96  96",
					" 84 252   0","100 100 100"," 60 248   8","104 104 104"," 52 236  32","108 108 108"," 40 224  56","112 112 112",
					" 28 212  80","116 116 116"," 16 200 104","120 120 120","  8 188 128","124 124 124","  0 156 156","128 128 128",
					"  0 112 180","132 132 132","  0  76 204","136 136 136","  0  32 232","140 140 140","  8   0 244","144 144 144",
					" 40   0 212","148 148 148"," 72   0 180","152 152 152","104   0 148","156 156 156","140   0 112","160 160 160",
					"172   0  80","164 164 164","204   0  48","168 168 168","236   0  16","172 172 172","252   8   0","176 176 176",
					"252  40   0","180 180 180","252  72   0","184 184 184","252 104   0","188 188 188","252 136   0","192 192 192",
					"252 168   0","196 196 196","252 200   0","200 200 200","252 232   0","204 204 204","244 252   0","208 208 208",
					"212 252   0","212 212 212","180 252   0","216 216 216","148 252   0","220 220 220","116 252   0","224 224 224",
					" 84 252   0","228 228 228"," 60 248   8","232 232 232"," 52 236  32","236 236 236"," 40 224  56","240 240 240",
					" 28 212  80","244 244 244"," 16 200 104","252 252 252","  8 188 128","252 252 252","  0 156 156","248 248 248",
					"  0 112 180","244 244 244","  0  56 216","240 240 240","  0  12 244","236 236 236"," 24   0 228","232 232 232",
					" 56   0 196","228 228 228"," 88   0 164","224 224 224","120   0 132","220 220 220","156   0  96","216 216 216",
					"188   0  64","212 212 212","220   0  32","208 208 208","252   0   0","204 204 204","252  24   0","200 200 200",
					"252  56   0","196 196 196","252  88   0","192 192 192","252 120   0","188 188 188","252 152   0","184 184 184",
					"252 184   0","180 180 180","252 216   0","176 176 176","252 248   0","172 172 172","228 252   0","168 168 168",
					"196 252   0","164 164 164","164 252   0","160 160 160","132 252   0","156 156 156","100 252   0","152 152 152"
				);

				var gf4Bytes = Encoding.UTF8.GetBytes(gf4File);
				using (var stream = new MemoryStream(gf4Bytes)) {
					_gf4d = new Gnofract4dGradient(stream);
				}
			}
			return _gf4d;
		}

		[DataTestMethod]
		[DataRow(0.0, 0.2, 0.2, 0.2)]
		[DataRow(0.1, 0.3, 0.2, 0.6)]
		[DataRow(0.2, 1.0, 0.8, 0.0)]
		[DataRow(0.3, 0.0, 0.3, 0.3)]
		[DataRow(0.4, 1.0, 0.0, 0.0)]
		[DataRow(0.5, 0.4, 0.7, 0.2)]
		[DataRow(0.6, 0.6, 0.6, 0.6)]
		[DataRow(0.7, 0.9, 0.8, 0.4)]
		[DataRow(0.8, 0.0, 0.7, 0.5)]
		[DataRow(0.9, 0.9, 0.4, 0.4)]
		[DataRow(1.0, 0.6, 0.6, 0.6)]
		public void TestGnofract4dGradient(double index, double r,double g,double b)
		{
			var grad = GetGnofract4d();
			var c1 = new IColor(r,g,b,1.0);
			var c2 = grad.GetColor(index);
			Helpers.AssertAreSimilar(c1,c2,0.2);
		}
	}
}
